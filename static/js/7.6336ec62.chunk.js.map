{"version":3,"sources":["components/common/FormControls/FormControls.jsx","components/common/FormControls/FormControls.module.css","utils/validators/validators.js","components/Login/LoginForm/LoginForm.module.css","components/Login/LoginForm/LoginForm.jsx","components/Login/LoginContainer.jsx"],"names":["FormControl","input","meta","touched","error","props","hasError","className","s","form_control","children","Input","restProps","Textarea","createField","component","name","placeholder","validators","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","minLengthCreator","minLength","maxLength50","minLength8","LoginForm","handleSubmit","onSubmit","type","error_message","LoginReduxForm","reduxForm","form","LoginContainer","formData","console","log","login","email","password","rememberMe","this","isAuth","to","React","Component","connect","state","auth"],"mappings":"yQAIMA,EAAc,SAAC,GAAgD,EAA9CC,MAA+C,IAAD,IAAvCC,KAAOC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAWC,EAAY,gCAC7DC,EAAWH,GAAWC,EAC5B,OACE,sBAAKG,UAAWC,IAAEC,aAAe,KAAOH,EAAWE,IAAEJ,MAAQ,IAA7D,UACE,8BAAMC,EAAMK,WACXJ,GAAY,+BAAOF,QAKbO,EAAQ,SAACN,GAAW,IACvBJ,EAA8BI,EAA9BJ,MAAgBW,GAAcP,EAAvBH,KADe,YACQG,EADR,mBAE9B,OACE,cAACL,EAAD,2BAAiBK,GAAjB,aACE,iDAAWJ,GAAWW,QAKfC,EAAW,SAACR,GAAW,IAC1BJ,EAA8BI,EAA9BJ,MAAgBW,GAAcP,EAAvBH,KADkB,YACKG,EADL,mBAEjC,OACE,cAACL,EAAD,2BAAiBK,GAAjB,aACE,oDAAcJ,GAAWW,QAKlBE,EAAc,SACzBC,EACAC,EACAC,EACAC,GAJyB,IAKzBb,EALyB,uDAKjB,GACRc,EANyB,uDAMlB,GANkB,OAQzB,gCACE,cAAC,IAAD,aACEJ,UAAWA,EACXC,KAAMA,EACNC,YAAaA,EACbG,SAAUF,GACNb,IACH,IACFc,O,oBC/CLE,EAAOC,QAAU,CAAC,aAAe,mCAAmC,MAAQ,8B,iCCD5E,sGAAO,IAAMC,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cAI9BE,EAAmB,SAACC,GAAD,OAAe,SAACL,GAC5C,GAAIA,GAASA,EAAMG,OAASE,EAAW,MAAM,iBAAN,OAAwBA,M,oBCVnER,EAAOC,QAAU,CAAC,cAAgB,mC,uICK5BQ,EAAcL,YAAiB,IAC/BM,EAAaH,YAAiB,GAmBrBI,EAjBG,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,aAAc7B,EAAW,EAAXA,MAC9B,OACI,uBAAM8B,SAAUD,EAAhB,UACKnB,YAAYH,IAAO,QAAS,QAAS,CAACY,IAAUO,IAChDhB,YAAYH,IAAO,WAAY,WAAY,CAACY,IAAUQ,GAAa,CAACI,KAAM,aAC1ErB,YAAYH,IAAO,aAAc,KAAM,GAAI,CAACwB,KAAM,YAAa,eAE/D/B,GAAS,qBAAKG,UAAWC,IAAE4B,cAAlB,SACN,6BAAKhC,MAET,8BACI,iD,gCCbViC,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,CAA2BN,GAE5CQ,E,4MACFN,SAAW,SAACO,GACRC,QAAQC,IAAIF,GACZ,EAAKpC,MAAMuC,MAAMH,EAASI,MAAOJ,EAASK,SAAUL,EAASM,a,uDAI7D,OAAIC,KAAK3C,MAAM4C,OAAe,cAAC,IAAD,CAAUC,GAAI,aAExC,gCACI,uCACA,cAACb,EAAD,CAAgBH,SAAUc,KAAKd,kB,GAXlBiB,IAAMC,WAuBpBC,uBANS,SAACC,GACrB,MAAO,CACHL,OAAQK,EAAMC,KAAKN,UAIa,CAACL,WAA1BS,CAAkCb","file":"static/js/7.6336ec62.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./FormControls.module.css\";\r\nimport { Field } from \"redux-form\";\r\n\r\nconst FormControl = ({ input, meta: {touched, error}, ...props }) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={s.form_control + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>{props.children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const createField = (\r\n  component,\r\n  name,\r\n  placeholder,\r\n  validators,\r\n  props = {},\r\n  text = \"\"\r\n) => (\r\n  <div>\r\n    <Field\r\n      component={component}\r\n      name={name}\r\n      placeholder={placeholder}\r\n      validate={validators}\r\n      {...props}\r\n    />{\" \"}\r\n    {text}\r\n  </div>\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_control\":\"FormControls_form_control__3mBCI\",\"error\":\"FormControls_error__1gX1z\"};","export const required = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n    if (value && value.length < minLength) return `Min length is ${minLength}`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error_message\":\"LoginForm_error_message__3qUuh\"};","import React from 'react';\r\nimport {Field} from \"redux-form\";\r\nimport {createField, Input} from \"../../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport s from './LoginForm.module.css'\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst minLength8 = minLengthCreator(8);\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(Input, 'email', 'Email', [required, maxLength50])}\r\n            {createField(Input, 'password', 'Password', [required, minLength8], {type: 'password'})}\r\n            {createField(Input, 'rememberMe', null, [], {type: 'checkbox'}, 'Remember Me')}\r\n            \r\n            {error && <div className={s.error_message}>\r\n                <h3>{error}</h3>\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm);\r\n\r\nclass LoginContainer extends React.Component {\r\n    onSubmit = (formData) => {\r\n        console.log(formData);\r\n        this.props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isAuth) return <Redirect to={'/profile'}/>\r\n        return (\r\n            <div>\r\n                <h1>Login</h1>\r\n                <LoginReduxForm onSubmit={this.onSubmit}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(LoginContainer);\r\n"],"sourceRoot":""}